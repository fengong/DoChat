/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from './chat';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/element';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from 'ionic-angular/navigation/nav-controller';
import * as import9 from 'ionic-angular/navigation/nav-params';
import * as import10 from 'ionic-angular/navigation/view-controller';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '../../node_modules/ionic-angular/components/toolbar/toolbar.ngfactory';
import * as import14 from '../../node_modules/ionic-angular/components/navbar/navbar.ngfactory';
import * as import15 from '../../components/do-chat/do-chat.ngfactory';
import * as import16 from 'ionic-angular/config/config';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from 'ionic-angular/components/app/app';
import * as import19 from 'ionic-angular/util/events';
import * as import20 from '../../providers/data-service';
import * as import21 from '../../providers/chat-service';
import * as import22 from '../../providers/user-service';
import * as import23 from 'ionic-angular/components/navbar/navbar';
import * as import24 from 'ionic-angular/components/toolbar/toolbar';
import * as import25 from '../../components/do-chat/do-chat';
export class Wrapper_ChatPage {
  context:import0.ChatPage;
  changed:boolean;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this.context = new import0.ChatPage(p0,p1,p2);
  }
  detectChangesInternal(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_ChatPage_Host:import2.RenderComponentType = (null as any);
class _View_ChatPage_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import3.AppElement;
  _ChatPage_0_4:Wrapper_ChatPage;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_ChatPage_Host0,renderType_ChatPage_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    this._el_0 = this.selectOrCreateHostElement('page-chat',rootSelector,(null as any));
    this._appEl_0 = new import3.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ChatPage0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ChatPage_0_4 = new Wrapper_ChatPage(this.parentInjector.get(import8.NavController),this.parentInjector.get(import9.NavParams),this.parentInjector.get(import10.ViewController));
    this._appEl_0.initComponent(this._ChatPage_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._ChatPage_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ChatPage) && (0 === requestNodeIndex))) { return this._ChatPage_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ChatPage_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_ChatPage_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<any> {
  if ((renderType_ChatPage_Host === (null as any))) { (renderType_ChatPage_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_ChatPage_Host0(viewUtils,parentInjector,declarationEl);
}
export const ChatPageNgFactory:import12.ComponentFactory<import0.ChatPage> = new import12.ComponentFactory<import0.ChatPage>('page-chat',viewFactory_ChatPage_Host0,import0.ChatPage);
const styles_ChatPage:any[] = ([] as any[]);
var renderType_ChatPage:import2.RenderComponentType = (null as any);
class _View_ChatPage0 extends import1.AppView<import0.ChatPage> {
  _el_0:any;
  _Header_0_3:import13.Wrapper_Header;
  _text_1:any;
  _el_2:any;
  /*private*/ _appEl_2:import3.AppElement;
  _Navbar_2_4:import14.Wrapper_Navbar;
  _text_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  /*private*/ _appEl_7:import3.AppElement;
  _DoChat_7_4:import15.Wrapper_DoChat;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement) {
    super(_View_ChatPage0,renderType_ChatPage,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'ion-header',(null as any));
    this._Header_0_3 = new import13.Wrapper_Header(this.parentInjector.get(import16.Config),new import17.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import10.ViewController,(null as any)));
    this._text_1 = this.renderer.createText(this._el_0,'\n	',(null as any));
    this._el_2 = this.renderer.createElement(this._el_0,'ion-navbar',(null as any));
    this.renderer.setElementAttribute(this._el_2,'class','toolbar');
    this._appEl_2 = new import3.AppElement(2,0,this,this._el_2);
    var compView_2:any = import14.viewFactory_Navbar0(this.viewUtils,this.injector(2),this._appEl_2);
    this._Navbar_2_4 = new import14.Wrapper_Navbar(this.parentInjector.get(import18.App),this.parentInjector.get(import10.ViewController,(null as any)),this.parentInjector.get(import8.NavController,(null as any)),this.parentInjector.get(import16.Config),new import17.ElementRef(this._el_2),this.renderer);
    this._appEl_2.initComponent(this._Navbar_2_4.context,([] as any[]),compView_2);
    this._text_3 = this.renderer.createText((null as any),'\n	',(null as any));
    compView_2.create(this._Navbar_2_4.context,[
      ([] as any[]),
      ([] as any[]),
      ([] as any[]),
      ([] as any[]).concat([this._text_3])
    ]
    ,(null as any));
    this._text_4 = this.renderer.createText(this._el_0,'\n\n',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n\n',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this._el_7 = this.renderer.createElement(parentRenderNode,'do-chat',(null as any));
    this._appEl_7 = new import3.AppElement(7,(null as any),this,this._el_7);
    var compView_7:any = import15.viewFactory_DoChat0(this.viewUtils,this.injector(7),this._appEl_7);
    this._DoChat_7_4 = new import15.Wrapper_DoChat(this.parentInjector.get(import19.Events),this.parentInjector.get(import20.DoDataService),compView_7.ref,this.parentInjector.get(import21.DoChatService),this.parentInjector.get(import22.DoUserService),this.parentInjector.get(import10.ViewController),this.parentInjector.get(import8.NavController));
    this._appEl_7.initComponent(this._DoChat_7_4.context,([] as any[]),compView_7);
    compView_7.create(this._DoChat_7_4.context,([] as any[]),(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_7,'onMsg',this.eventHandler(this._handle_onMsg_7_0.bind(this)));
    const subscription_0:any = this._DoChat_7_4.context.onMsg.subscribe(this.eventHandler(this._handle_onMsg_7_0.bind(this)));
    this.init(([] as any[]),[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4,
      this._text_5,
      this._text_6,
      this._el_7
    ]
    ,[disposable_0],[subscription_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import23.Navbar) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._Navbar_2_4.context; }
    if (((token === import24.Header) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._Header_0_3.context; }
    if (((token === import25.DoChat) && (7 === requestNodeIndex))) { return this._DoChat_7_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._Header_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    this._Navbar_2_4.detectChangesInternal(this,this._el_2,throwOnChange);
    const currVal_3:any = this.context.friendIds;
    this._DoChat_7_4.check_friendIds(currVal_3,throwOnChange,false);
    const currVal_4:any = this.context.convId;
    this._DoChat_7_4.check_convId(currVal_4,throwOnChange,false);
    const currVal_5:any = this.context.convName;
    this._DoChat_7_4.check_convName(currVal_5,throwOnChange,false);
    this._DoChat_7_4.detectChangesInternal(this,this._el_7,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._DoChat_7_4.context.ngAfterContentInit(); } }
    const currVal_0:any = this._Navbar_2_4.context._hidden;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementProperty(this._el_2,'hidden',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._Navbar_2_4.context._sbPadding;
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_2,'statusbar-padding',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) {
      if ((this.numberOfChecks === 0)) { this._Navbar_2_4.context.ngAfterViewInit(); }
      if ((this.numberOfChecks === 0)) { this._DoChat_7_4.context.ngAfterViewInit(); }
    }
  }
  private _handle_onMsg_7_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onMessage($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_ChatPage0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import3.AppElement):import1.AppView<import0.ChatPage> {
  if ((renderType_ChatPage === (null as any))) { (renderType_ChatPage = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_ChatPage,{})); }
  return new _View_ChatPage0(viewUtils,parentInjector,declarationEl);
}