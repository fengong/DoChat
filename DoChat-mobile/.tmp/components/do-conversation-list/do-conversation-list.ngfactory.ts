/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from './do-conversation-list';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/util/events';
import * as import9 from 'ionic-angular/navigation/view-controller';
import * as import10 from '../../providers/data-service';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '../../node_modules/ionic-angular/components/list/list.ngfactory';
import * as import14 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import15 from 'ionic-angular/config/config';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from 'ionic-angular/gestures/gesture-controller';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/common/src/directives/ng_for';
import * as import21 from 'ionic-angular/components/list/list';
import * as import22 from './do-conversation-item.ngfactory';
import * as import23 from './do-conversation-item';
export class Wrapper_DoConversationList {
  context:import0.DoConversationList;
  changed:boolean;
  /*private*/ _clientId:any;
  constructor(p0:any,p1:any,p2:any) {
    this.changed = false;
    this._clientId = import1.UNINITIALIZED;
    this.context = new import0.DoConversationList(p0,p1,p2);
  }
  check_clientId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._clientId,currValue))) {
      this.changed = true;
      this.context.clientId = currValue;
      this._clientId = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
}
var renderType_DoConversationList_Host:import4.RenderComponentType = (null as any);
class _View_DoConversationList_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _DoConversationList_0_4:Wrapper_DoConversationList;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DoConversationList_Host0,renderType_DoConversationList_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('do-conversation-list',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_DoConversationList0(this.viewUtils,this.injector(0),this._appEl_0);
    this._DoConversationList_0_4 = new Wrapper_DoConversationList(this.parentInjector.get(import8.Events),this.parentInjector.get(import9.ViewController),this.parentInjector.get(import10.DoDataService));
    this._appEl_0.initComponent(this._DoConversationList_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._DoConversationList_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DoConversationList) && (0 === requestNodeIndex))) { return this._DoConversationList_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DoConversationList_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_DoConversationList_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_DoConversationList_Host === (null as any))) { (renderType_DoConversationList_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_DoConversationList_Host0(viewUtils,parentInjector,declarationEl);
}
export const DoConversationListNgFactory:import12.ComponentFactory<import0.DoConversationList> = new import12.ComponentFactory<import0.DoConversationList>('do-conversation-list',viewFactory_DoConversationList_Host0,import0.DoConversationList);
const styles_DoConversationList:any[] = ([] as any[]);
var renderType_DoConversationList:import4.RenderComponentType = (null as any);
class _View_DoConversationList0 extends import3.AppView<import0.DoConversationList> {
  _el_0:any;
  _List_0_3:import13.Wrapper_List;
  _text_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _appEl_3:import5.AppElement;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import14.Wrapper_NgFor;
  _text_4:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DoConversationList0,renderType_DoConversationList,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'ion-list',(null as any));
    this._List_0_3 = new import13.Wrapper_List(this.parentInjector.get(import15.Config),new import16.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import17.GestureController));
    this._text_1 = this.renderer.createText(this._el_0,'\n	',(null as any));
    this._text_2 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._appEl_3 = new import5.AppElement(3,0,this,this._anchor_3);
    this._TemplateRef_3_5 = new import18.TemplateRef_(this._appEl_3,viewFactory_DoConversationList1);
    this._NgFor_3_6 = new import14.Wrapper_NgFor(this._appEl_3.vcRef,this._TemplateRef_3_5,this.parentInjector.get(import19.IterableDiffers),this.ref);
    this._text_4 = this.renderer.createText(this._el_0,'\n',(null as any));
    this.init(([] as any[]),[
      this._el_0,
      this._text_1,
      this._text_2,
      this._anchor_3,
      this._text_4
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import20.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6.context; }
    if (((token === import21.List) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._List_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._List_0_3.detectChangesInternal(this,this._el_0,throwOnChange);
    const currVal_0:any = this.context.items;
    this._NgFor_3_6.check_ngForOf(currVal_0,throwOnChange,false);
    this._NgFor_3_6.detectChangesInternal(this,this._anchor_3,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_DoConversationList0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.DoConversationList> {
  if ((renderType_DoConversationList === (null as any))) { (renderType_DoConversationList = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_DoConversationList,{})); }
  return new _View_DoConversationList0(viewUtils,parentInjector,declarationEl);
}
class _View_DoConversationList1 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _DoConversationItem_0_4:import22.Wrapper_DoConversationItem;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_DoConversationList1,renderType_DoConversationList,import7.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'do-conversation-item',(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = import22.viewFactory_DoConversationItem0(this.viewUtils,this.injector(0),this._appEl_0);
    this._DoConversationItem_0_4 = new import22.Wrapper_DoConversationItem(this.parent.parentInjector.get(import8.Events));
    this._appEl_0.initComponent(this._DoConversationItem_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._DoConversationItem_0_4.context,([] as any[]),(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'convItemClicked',this.eventHandler(this._handle_convItemClicked_0_0.bind(this)));
    const subscription_0:any = this._DoConversationItem_0_4.context.convItemClicked.subscribe(this.eventHandler(this._handle_convItemClicked_0_0.bind(this)));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],[disposable_0],[subscription_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import23.DoConversationItem) && (0 === requestNodeIndex))) { return this._DoConversationItem_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1:any = this.context.$implicit;
    this._DoConversationItem_0_4.check_convItem(currVal_1,throwOnChange,false);
    this._DoConversationItem_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_convItemClicked_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.onConversationItemClick($event,this.context.$implicit)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_DoConversationList1(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  return new _View_DoConversationList1(viewUtils,parentInjector,declarationEl);
}