/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from './do-conversation-list';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/element';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from 'ionic-angular/util/events';
import * as import9 from 'ionic-angular/navigation/view-controller';
import * as import10 from '../../providers/data-service';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '../../node_modules/ionic-angular/components/list/list.ngfactory';
import * as import14 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import15 from 'ionic-angular/config/config';
import * as import16 from '@angular/core/src/linker/element_ref';
import * as import17 from 'ionic-angular/gestures/gesture-controller';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/common/src/directives/ng_for';
import * as import21 from 'ionic-angular/components/list/list';
import * as import22 from './do-conversation-item.ngfactory';
import * as import23 from './do-conversation-item';
export var Wrapper_DoConversationList = (function () {
    function Wrapper_DoConversationList(p0, p1, p2) {
        this.changed = false;
        this._clientId = import1.UNINITIALIZED;
        this.context = new import0.DoConversationList(p0, p1, p2);
    }
    Wrapper_DoConversationList.prototype.check_clientId = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import2.checkBinding(throwOnChange, this._clientId, currValue))) {
            this.changed = true;
            this.context.clientId = currValue;
            this._clientId = currValue;
        }
    };
    Wrapper_DoConversationList.prototype.detectChangesInternal = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        return changed;
    };
    return Wrapper_DoConversationList;
}());
var renderType_DoConversationList_Host = null;
var _View_DoConversationList_Host0 = (function (_super) {
    __extends(_View_DoConversationList_Host0, _super);
    function _View_DoConversationList_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_DoConversationList_Host0, renderType_DoConversationList_Host, import7.ViewType.HOST, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_DoConversationList_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('do-conversation-list', rootSelector, null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_DoConversationList0(this.viewUtils, this.injector(0), this._appEl_0);
        this._DoConversationList_0_4 = new Wrapper_DoConversationList(this.parentInjector.get(import8.Events), this.parentInjector.get(import9.ViewController), this.parentInjector.get(import10.DoDataService));
        this._appEl_0.initComponent(this._DoConversationList_0_4.context, [], compView_0);
        compView_0.create(this._DoConversationList_0_4.context, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_DoConversationList_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.DoConversationList) && (0 === requestNodeIndex))) {
            return this._DoConversationList_0_4.context;
        }
        return notFoundResult;
    };
    _View_DoConversationList_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._DoConversationList_0_4.detectChangesInternal(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_DoConversationList_Host0;
}(import3.AppView));
function viewFactory_DoConversationList_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_DoConversationList_Host === null)) {
        (renderType_DoConversationList_Host = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, [], {}));
    }
    return new _View_DoConversationList_Host0(viewUtils, parentInjector, declarationEl);
}
export var DoConversationListNgFactory = new import12.ComponentFactory('do-conversation-list', viewFactory_DoConversationList_Host0, import0.DoConversationList);
var styles_DoConversationList = [];
var renderType_DoConversationList = null;
var _View_DoConversationList0 = (function (_super) {
    __extends(_View_DoConversationList0, _super);
    function _View_DoConversationList0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_DoConversationList0, renderType_DoConversationList, import7.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_DoConversationList0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'ion-list', null);
        this._List_0_3 = new import13.Wrapper_List(this.parentInjector.get(import15.Config), new import16.ElementRef(this._el_0), this.renderer, this.parentInjector.get(import17.GestureController));
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this._text_2 = this.renderer.createText(this._el_0, '\n  ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._appEl_3 = new import5.AppElement(3, 0, this, this._anchor_3);
        this._TemplateRef_3_5 = new import18.TemplateRef_(this._appEl_3, viewFactory_DoConversationList1);
        this._NgFor_3_6 = new import14.Wrapper_NgFor(this._appEl_3.vcRef, this._TemplateRef_3_5, this.parentInjector.get(import19.IterableDiffers), this.ref);
        this._text_4 = this.renderer.createText(this._el_0, '\n', null);
        this.init([], [
            this._el_0,
            this._text_1,
            this._text_2,
            this._anchor_3,
            this._text_4
        ], [], []);
        return null;
    };
    _View_DoConversationList0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import18.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import20.NgFor) && (3 === requestNodeIndex))) {
            return this._NgFor_3_6.context;
        }
        if (((token === import21.List) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._List_0_3.context;
        }
        return notFoundResult;
    };
    _View_DoConversationList0.prototype.detectChangesInternal = function (throwOnChange) {
        this._List_0_3.detectChangesInternal(this, this._el_0, throwOnChange);
        var currVal_0 = this.context.items;
        this._NgFor_3_6.check_ngForOf(currVal_0, throwOnChange, false);
        this._NgFor_3_6.detectChangesInternal(this, this._anchor_3, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_DoConversationList0;
}(import3.AppView));
export function viewFactory_DoConversationList0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_DoConversationList === null)) {
        (renderType_DoConversationList = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, styles_DoConversationList, {}));
    }
    return new _View_DoConversationList0(viewUtils, parentInjector, declarationEl);
}
var _View_DoConversationList1 = (function (_super) {
    __extends(_View_DoConversationList1, _super);
    function _View_DoConversationList1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_DoConversationList1, renderType_DoConversationList, import7.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import1.ChangeDetectorStatus.CheckAlways);
    }
    _View_DoConversationList1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'do-conversation-item', null);
        this._appEl_0 = new import5.AppElement(0, null, this, this._el_0);
        var compView_0 = import22.viewFactory_DoConversationItem0(this.viewUtils, this.injector(0), this._appEl_0);
        this._DoConversationItem_0_4 = new import22.Wrapper_DoConversationItem(this.parent.parentInjector.get(import8.Events));
        this._appEl_0.initComponent(this._DoConversationItem_0_4.context, [], compView_0);
        compView_0.create(this._DoConversationItem_0_4.context, [], null);
        var disposable_0 = this.renderer.listen(this._el_0, 'convItemClicked', this.eventHandler(this._handle_convItemClicked_0_0.bind(this)));
        var subscription_0 = this._DoConversationItem_0_4.context.convItemClicked.subscribe(this.eventHandler(this._handle_convItemClicked_0_0.bind(this)));
        this.init([].concat([this._el_0]), [this._el_0], [disposable_0], [subscription_0]);
        return null;
    };
    _View_DoConversationList1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import23.DoConversationItem) && (0 === requestNodeIndex))) {
            return this._DoConversationItem_0_4.context;
        }
        return notFoundResult;
    };
    _View_DoConversationList1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1 = this.context.$implicit;
        this._DoConversationItem_0_4.check_convItem(currVal_1, throwOnChange, false);
        this._DoConversationItem_0_4.detectChangesInternal(this, this._el_0, throwOnChange);
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_DoConversationList1.prototype._handle_convItemClicked_0_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.parent.context.onConversationItemClick($event, this.context.$implicit) !== false);
        return (true && pd_0);
    };
    return _View_DoConversationList1;
}(import3.AppView));
function viewFactory_DoConversationList1(viewUtils, parentInjector, declarationEl) {
    return new _View_DoConversationList1(viewUtils, parentInjector, declarationEl);
}
